// Generated by CoffeeScript 1.12.2
(function() {
  $(document).ready(function () {


  var App, dragging;
  var apiData;
  
  App = {};
  oldCordX = null;
  oldCordY = null;
  dragging = false;
    
  var url = "http://srcloudboardserver.azurewebsites.net/api/Boards";
    
  $.get(url,function(data){
    apiData = data;
  }).done(function() {

  
  $('#makeBoard').click(function(e){
    e.preventDefault();
    $.ajax({
          type: "POST",
          url: url,
          // The key needs to match your method's input parameter (case-sensitive).
          data: JSON.stringify({"ipAddress": "http://localhost:3000", "boardName":"Ravi"}),
          contentType: "application/json",
          dataType: "json",
          success: function(data){alert(data);},
          failure: function(errMsg) {
            alert(errMsg);
          }
	});
  });
  App.init = function() {
    App.canvas = document.createElement('canvas');
    App.canvas.height = 400;
    //App.canvas.width = 600;
    App.canvas.width = $('.canvas-container').width();
    document.querySelector('div.canvas-container').appendChild(App.canvas);
    App.ctx = App.canvas.getContext("2d");
    App.ctx.fillStyle = "solid";
    App.ctx.strokeStyle = "#bada55";
    App.ctx.lineWidth = 5;
    App.ctx.lineCap = "round";
    App.clear = function() {
      return App.ctx.clearRect(0, 0, App.canvas.width, App.canvas.height);
    };
    App.draw = function(oldX, oldY, x, y, type) {
      if (type === "dragstart") {
        //App.ctx.beginPath();
        //return App.ctx.moveTo(x, y);
      } else if (type === "drag") {
		App.ctx.beginPath();
		if(oldCordX == null)
        	App.ctx.moveTo(x, y);
		else
			App.ctx.moveTo(oldX, oldY);
			
        App.ctx.lineTo(x, y);
		//oldCordX = x;
		//oldCordY = y;
        App.ctx.stroke();
		App.ctx.closePath();
      } else {
        //return App.ctx.closePath();
      }
    };
  };
	console.log(apiData[0].ipAddress);
  App.socket = io.connect('http://sr-94933.onmodulus.net');
  //App.socket = io.connect('http://localhost:3000');

  App.socket.on('draw', function(data) {
    return App.draw(data.oldX, data.oldY, data.x, data.y, data.type);
  });

  App.init();

  $('canvas').on('mousemove', function(e) {
    var offset, x, y;
    if (dragging) {
      offset = $(this).offset();
      e.offsetX = e.pageX - offset.left;
      e.offsetY = e.pageY - offset.top;
      x = e.offsetX;
      y = e.offsetY;
      App.draw(oldCordX, oldCordY, x, y, 'drag');
      App.socket.emit('drawClick', {
        x: x,
        y: y,
		oldX: oldCordX,
	  	oldY: oldCordY,
        type: 'drag'
      });
	  oldCordX = x;
	  oldCordY = y;
    }
  });

  $('canvas').on('mousedown', function(e) {
    var offset, x, y;
    offset = $(this).offset();
    e.offsetX = e.pageX - offset.left;
    e.offsetY = e.pageY - offset.top;
    x = e.offsetX;
    y = e.offsetY;
    //App.draw(x, y, 'dragstart');
    /*App.socket.emit('drawClick', {
      x: x,
      y: y,
	  oldX: oldCordX,
	  oldY: oldCordY,
      type: 'dragstart'
    });*/
	oldCordX = x;
	oldCordY = y;
    return dragging = true;
  });

  $('canvas').on('mouseup', function(e) {
    var offset, x, y;
    offset = $(this).offset();
    e.offsetX = e.pageX - offset.left;
    e.offsetY = e.pageY - offset.top;
    x = e.offsetX;
    y = e.offsetY;
    /*App.draw(x, y, 'dragend');
    App.socket.emit('drawClick', {
      x: x,
      y: y,
	  oldX: oldCordX,
	  oldY: oldCordY,
      type: 'dragend'
    });*/
    return dragging = false;
  });

  $('#clear').on('click', function(e) {
    return App.clear();
  });
  });
  });
}).call(this);

//# sourceMappingURL=scripts.js.map
